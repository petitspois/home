#--------------------------------------------
# aria2rc 配置文件，默认配置文件路径：$HOME/.aria2/aria2.conf
# 格式：man 手册里面 去掉 -- 前缀的长格式命令参数组成的 NAME
# NAME=VALUE    | >>> --no-conf 不读取配置
#--------------------------------------------
# URL是URI的一种，是URI命名机制的一个子集，可以说URI是抽象的，而具体要使用URL来定位资源
# From：参照：/usr/share/doc/aria2/aria2c.1.html

# [ Basic 基本设置 ]# {{{
#############################################
#
# -d 指定下载文件的磁盘路径，默认下载目录
#dir=/tmp

# -o 指定下载文件的文件名，当使用 -Z 时，忽略该选项
#out=filename

# Bt / Metalink 文件完整性检测，默认：false
#check-integrity=false

# 只适用于 HTTP(S)/FTP，继续 web 浏览器/其他程序顺序下载的未完成任务，断点续传
#continue

# HTTP/FTP 静态 URI 的最大并行下载，默认：5
max-concurrent-downloads=5

# 每个下载的每台服务器所支持的最大下载连接数（1-4）,默认：1
max-connection-per-server=4

# 下载一个文件用到的链接数目，不同于并行下载。默认：5
# 指定的 URI 大于 N，只保留前 N 个链接，少于 N URI会被多次并发使用
# 同一个链接的并发使用受 max-connection-per-server 参数控制
# 该参数对 Metalink 无效，使用 -C 代替该参数
split=5

# 下载分块的大小：下载文件>2*SIZE，会自动将文件分割，多链接下载，默认：SIZE=20M
min-split-size=10M

# 全部最大下载速度，默认：0 不限制
#max-overall-download-limit=0

# 每个下载的最大速度，默认：0
#max-download-limit=0

# performance profile 性能运行描述文件输出/载入文件，[ ? 文件是否存在 ]
#server-stat-of=/tmp/aria2rc.profile
#server-stat-if=/tmp/aria2rc.profile

# URI 选择算法，默认：feedback，使用之前任务中记录的高速uri，需要 profile 文件支持
uri-selector=adaptive

# }}}

# [ Advanced 高级选项 ]# {{{
#############################################

# 继续上次未完成的下载，默认：true
#always-resume=true

# 遇到同名文件，自动重命名，默认：true
#auto-file-renaming=true

# 下载时，为文件分配磁盘空间，ext4 文件系统，建议使用 falloc 选项，默认：preallow
#file-allocation=preallow

# 小于 SIZE，的文件不分配磁盘空间，默认：5M
no-file-allocation-limit=10M

# 下载文件大小 / 下载速度，单位为 便于阅读样式，默认：true
#human-readable=true

# 参数化 URI，默认：false
# http://{sv1,sv2,sv3}/foo.iso
# http://host/image[000-100:2].img
parameterized-uri=true

# 静默模式，不在终端显示输出信息，默认：false
#quiet=false

# 时事文件校验，默认：true
#realtime-chunk-checksum=true

# 如果控制文件不存在，继续上次未完成的下载 [ ? restart:从零开始 / 续传下载 ]，默认：false
#allow-overwrite=true

# 开始下载前，删除控制文件，与 allow-overwrite = true 选项协作，每次下载继续上次未完成的任务，默认：？
# 针对 代理下载 无法使用 resume 续传下载，非常有用 [ ? restart / resume ]
#remove-control-file=true



# }}}

# [ BT ]# {{{
#############################################

# -S 显示 .torrent .metalink 列表 [?]，之后退出
#show-files
#select-file=INDEX
# -O ，设置 INDEX 文件路径，PATH 为--dir指定的相对路径，可以指定下载 BT 文件名
#index-out=INDEX=PATH

# True  ：使用 check-integrity 参数进行 hash 检测和下载完成后，继续上传文件。默认
# False ：只在下载时和文件损坏时检查文件
bt-hash-check-seed=false

# 最大种子链接数，默认：55，0 无限
bt-max-peers=0

# 无须确认验证 hash ，预先 seed 下载，默认：false
#bt-seed-unverified=false

# 如果下载速度低于 N，aria2rc 会尝试连接更多的种子以增加下载速度，默认：50K
bt-request-peer-speed-limit=20K

# 预先 seed 下载文件，不进行 hash 检验，默认：false
bt-seed-unverified=false

# tracker 中断时间，0 根据 tracker 响应和下载进度 决定 [?]，默认：0
#bt-tracker-interval=0

# 启用 DHT，如果在 torrent 设置了 private key，该选项即使设置 true 仍然无效，默认：true
enable-dht=true

# DHT 使用的 UDP 监听端口，默认：6881-6999
#dht-listen-port=6881-6999

# 下载监听的 TCP 端口，默认：6881-6999
#listen-port=6881-6999

# 种子交换扩展，如果在 torrent 设置了 private key，该选项即使设置 true 仍然无效，默认：true
#enable-peer-exchange=true

# 当 aria2rc 下载 *.torrent 文件后，aria2rc 会自动分析 torrent 文件，并开始下载，默认：true
#follow-torrent=true

# 所有下载的最大上传速度，0 无限，默认：0
max-overall-upload-limit=256K

# 每一个 torrent 下载的最大上传速度
max-upload-limit=64K

# 直到达到指定的分享 seed 结束 torrent，0.0 无限，默认：1.0
seed-ratio=0.2

# seed 上传文件的时间，单位：分钟。同 seed-ratio 协同，任意一个达到条件，便结束 seed
seed-time=15

# }}}

# [ FTP ]# {{{
#############################################

# FTP 用户名，针对所有 URIs，默认：anonymous
#ftp-user=
#ftp-passwd=

# FTP 传输类型，binary / ascii，默认：binary
#ftp-type=

# }}}



